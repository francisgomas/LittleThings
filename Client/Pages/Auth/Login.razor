@page "/login"
@using Microsoft.AspNetCore.WebUtilities
@inject NavigationManager NavigationManager
@inject IAuthService AuthService
@inject ILocalStorageService LocalStorage
@inject AuthenticationStateProvider AuthenticationStateProvider

<PageTitle>Login</PageTitle>

<div class="container-fluid pt-5">
    <div class="text-center mb-4">
        <h2 class="section-title px-5"><span class="px-2">Login</span></h2>
    </div>
    <div class="row px-xl-5">
        <div class="col-lg-12 mb-5">
            <div class="contact-form">
                @if (message != "")
                {
                     <div class="alert alert-danger" role="alert">
                      @message
                    </div>
                }
                <EditForm Model="user" OnValidSubmit="onLogin">
                    <DataAnnotationsValidator />
                    <div class="control-group mb-3">
                        <input type="text" class="form-control" id="username" placeholder="Enter username" @bind-value="user.Username">
                        <ValidationMessage For="@(() => user.Username)" />
                    </div>
                    <div class="control-group mb-3">
                        <input type="password" class="form-control" id="password" placeholder="Enter password" @bind-value="user.Password">
                        <ValidationMessage For="@(() => user.Password)" />
                    </div>
                    <div>
                        <input class="btn btn-primary py-2 px-5" type="submit" value="Login"/>
                        <button class="btn btn-info py-2 px-5" @onclick="ShowRegister" id="sendMessageButton">Yet to Register? </button>
                    </div>
                </EditForm>
            </div>
        </div>
    </div>
</div>

@code{
    UserLogin user = new UserLogin();
    private string returnUrl, message = string.Empty;

    protected override void OnInitialized()
    { 
        returnUrl = NavigationManager.BaseUri;
    }

    private async Task onLogin()
    {
        var result = await AuthService.Login(user);
        if (result.Success)
        {
            message = string.Empty;

            await LocalStorage.SetItemAsync("authToken", result.Data);
            await AuthenticationStateProvider.GetAuthenticationStateAsync();
            NavigationManager.NavigateTo(returnUrl, true);
        }
        else
        {
            message = result.Message;
        }
    }

    void ShowRegister()
    {
        NavigationManager.NavigateTo("/register");
    }
}