@page "/admin/permission/edit"
@page "/admin/permission/edit/{id:int}"
@inject IPermissionService PermissionService
@inject IAuthService AuthService
@inject NavigationManager NavigationManager
@attribute [Authorize(Roles = "Admin")]

<PageTitle>@GetPageTitle()</PageTitle>

@if (isAuthenticated)
{
    <Header Value="@GetPageTitle()"/>
    <div class="container-fluid">
        <div class="row px-xl-5">
            <div class="col-lg-12 mb-5">
                <EditForm Model="permission" OnValidSubmit="onSubmit">
                    <DataAnnotationsValidator />
                    <div class="control-group mb-3">
                        <input type="text" class="form-control" id="controllername" placeholder="Enter controller name" @bind-value="permission.ControllerName">
                        <ValidationMessage For="@(() => permission.ControllerName)" />
                    </div>
                    <div class="control-group mb-3">
                        <input type="text" class="form-control" id="actionname" placeholder="Enter action name" @bind-value="permission.ActionName">
                        <ValidationMessage For="@(() => permission.ActionName)" />
                    </div>
                    <div>
                        <input class="btn btn-primary py-2 px-5" type="submit" value="@btnText" />
                        <button class="btn btn-info py-2 px-5" @onclick="@(() => NavigationManager.NavigateTo("/admin/permission"))">Go Back </button>
                    </div>
                </EditForm>

            </div>
        </div>
    </div>
}

@code{
    [Parameter]
    public int? id { get; set; } 
    bool isAuthenticated = false;
    string btnText = string.Empty;
    private string GetPageTitle() => "Permission";
    Permission permission = new Permission { };

    protected override async Task OnInitializedAsync()
    {
        isAuthenticated = await AuthService.IsUserAuthenticated();
        btnText = id == null ? "Create Permission" : "Update Permission";
    }

    protected override async Task OnParametersSetAsync()
    {
        if (id != null)
        {
            permission = await PermissionService.GetSinglePermission((int)id);
        } 
        else
        {
            permission = new Permission { };
        }
    }

    async Task onSubmit()
    {
        if (id != null)
        {
            await PermissionService.UpdatePermission(permission);
        }
        else
        {
            await PermissionService.CreatePermission(permission);
        }
    }
}